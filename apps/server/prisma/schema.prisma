// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String  @unique
  description String?
  status      Boolean
  users       User[]   @relation("RoleToUsers")
}

model User {
  id        Int    @id @default(autoincrement())
  lastname  String
  firstname String
  email     String @unique
  password  String
  roleId    Int
  status    Boolean
  role      Role   @relation(fields: [roleId], references: [id], name: "RoleToUsers")
  carts     Cart[] @relation("UserToCarts")
  orders    Order[]@relation("UserToOrders")
  @@index([roleId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Boolean
  products    Product[] @relation("CategoryToProducts")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  price       Decimal   @default(0.00)
  status      Boolean
  imageUrl    String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id], name: "CategoryToProducts")
  variants    Variant[] @relation("ProductToVariants")
  @@index([categoryId])
}

model Variant {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Boolean
  productId   Int
  product     Product      @relation(fields: [productId], references: [id], name: "ProductToVariants")
  collections Collection[] @relation("VariantToCollections")
  cartItems   CartItem[]   @relation("VariantToCartItems")
  orderItems  OrderItem[]  @relation("VariantToOrderItems")
  @@index([productId])
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  status      Boolean
  variantId   Int
  variant     Variant   @relation(fields: [variantId], references: [id], name: "VariantToCollections")
  @@index([variantId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id], name: "UserToCarts")
  items     CartItem[] @relation("CartToCartItems")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  variantId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], name: "CartToCartItems")
  variant   Variant  @relation(fields: [variantId], references: [id], name: "VariantToCartItems")

  @@index([cartId])
  @@index([variantId])
}

model Order {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id], name: "UserToOrders")
  items     OrderItem[]@relation("OrderToOrderItems")
  total     Float
  status    Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  variantId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], name: "OrderToOrderItems")
  variant   Variant  @relation(fields: [variantId], references: [id], name: "VariantToOrderItems")

  @@index([orderId])
  @@index([variantId])
}